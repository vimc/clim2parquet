{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"clim2parquet: Convert climate data CSVs to Parquet","text":"<p>clim2parquet is a small Python package for internal use at RESIDE-IC to convert prepared climate time-series data into Parquet files in support of climate-informed infectious disease modelling for VIMC.</p>"},{"location":"#installation","title":"Installation","text":"<p>clim2parquet can be installed from GitHub using a Python package manager.</p> Bash<pre><code>pip install clim2parquet@git+https://github.com/vimc/clim2parquet\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<p>clim2parquet is intended to be used internally with access to climate data generated at Imperial College. With access to this data, you can convert country-specific climate data time-series by GADM admin level into Parquet files.</p> Python<pre><code>import clim2parquet\n\n# get available data sources\nclim2parquet.get_data_names()\n\n# with `dir_from` as your country-specific climate data source\n# for GADM admin level 1 (largest sub-national unit)\nclim2parquet.clim_to_parquet(\n    data_source=\"CHIRPS\", dir_from=dir_from, dir_to=\".\", admin_level=1\n)\n\n# converting multiple data sources and admin levels at once\nclim2parquet.clim_to_parquet(\n    data_source=[\"CHIRPS\", \"PERSIANN\"], dir_from=dir_from,\n    dir_to=\".\", admin_level=[0, 1]\n)\n</code></pre> <p>You can generate a directory-specific index of administrative units to help identify output data and link it to other covariates using the function <code>make_admin_unit_ids</code>. This function is used automatically from within <code>clim_to_parquet</code> if no index file is present in the data directory.</p> <p>We currently support finding and converting the following climate data sources:</p> <ul> <li>CHIRPS</li> <li>ERA5 mean temperature</li> <li>ERA5 maximum temperature</li> <li>ERA5 minimum temperature</li> <li>ERA5 relative humidity</li> <li>ERA5 specific humidity</li> <li>PERSIANN</li> </ul>"},{"location":"#package-data","title":"Package data","text":"<p>This package includes some data accessible via a package function. To generate the raw data file read and provided by this function, run the scripts in <code>data-raw</code>. The recommended way of doing this is using the <code>uv</code> package manager.</p> Bash<pre><code># to prepare data on climate data sources\nuv run data-raw/data_sources.py\n</code></pre>"},{"location":"#help","title":"Help","text":"<p>To report a bug please open an issue or get in touch with RESIDE-IC.</p>"},{"location":"#contribute","title":"Contribute","text":"<p>Contribute via a pull request. </p>"},{"location":"CHANGELOG/","title":"News","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":"<ul> <li> <p>Added basic package functionality with minimum test set; includes function and package documentation</p> </li> <li> <p>Added online documentation build using <code>mkdocs</code> and related packages</p> </li> <li> <p>Added script under <code>data-raw</code> to make a package-specific global index of administrative units and identifiers for use in data preparation.</p> </li> </ul>"},{"location":"admin_unit_index/","title":"Admin unit indexing","text":"<p>clim2parquet provides an index file for administrative units that aims to follow the GADM format, allowing users to link prepared climate data with GADM data.</p> <p>The package data <code>admin_units_index</code> is a dataset with the following columns taken from GADM:</p> <ul> <li> <p>\"GID_0\" (country ISO 3 character code);</p> </li> <li> <p>\"GID_1\", \"GID_2\", \"GID_3\" (sub-national unit identifiers);</p> </li> <li> <p>\"NAME_0\", \"NAME_1\", \"NAME_2\", \"NAME_3\" (country and sub-national unit names).</p> </li> </ul> <p>A further column \"admin_unit_id\" provides an integer identifier for each admin unit.</p>"},{"location":"admin_unit_index/#differences-from-gadm-data","title":"Differences from GADM data","text":"<p>The admin unit index file differs from GADM data, and the column \"admin_unit_id\" does not correspond to the \"UID\" column found in GADM data.</p> <p>There are extra entries (rows) for each admin level &lt; 3, that is entries where for \"GID_X\" every \"GID_(Y &lt; X)\" is missing.</p> <p>In GADM data, each entry is resolved down to the lowest available admin level (which may be as low as level 5 for some countries), with a unique identifier \"UID\" for each one.</p> <p>Since we resolve data down to multiple levels of interest (up to level 3), we have had to construct a separate identifier that is applicable only to climate data generated using <code>clim_to_parquet</code>.</p> <p>You will need the package admin unit index file in order to link prepared climate data with GADM data.</p>"},{"location":"admin_unit_index/#preparing-the-index-file","title":"Preparing the index file","text":"<p>The index file is prepared from GADM spatial data. See and run the script <code>data-raw/admin_unit_ids.py</code> to generate data. The recommended way of doing this is using the <code>uv</code> package manager.</p> Bash<pre><code>uv run data-raw/admin_unit_ids.py\n</code></pre>"},{"location":"reference/","title":"Function reference","text":"<p>Convert country climate data to Parquet files.</p> <p>This package provides functionality to find and convert country climate data, assumed to be stored as CSVs, to Parquet files.</p> <p>This package contains the functions:</p> <ul> <li><code>get_data_names()</code>  -  Returns names of climate data sources.</li> <li><code>clim_to_parquet()</code>  -  Converts climate data to a single Parquet file.</li> </ul>"},{"location":"reference/#clim2parquet.clim_to_parquet","title":"<code>clim_to_parquet(data_source, dir_from, dir_to, admin_level=None, gadm_version='v410')</code>","text":"<p>Convert country climate data to a Parquet file.</p> <p>Parameters:</p> Name Type Description Default <code>data_source</code> <code>str | list[str]</code> <p>A data source or a list of data sources. See available data sources in <code>get_data_names()</code>.</p> required <code>dir_from</code> <code>(str, Path)</code> <p>Path to the CSV data directory, as a <code>str</code> or <code>pathlib.Path</code>.</p> required <code>dir_to</code> <code>str | Path</code> <p>Path to the output directory where Parquet files will be saved, as a <code>str</code> or <code>pathlib.Path</code>.</p> required <code>admin_level</code> <code>(int, list[int])</code> <p>GADM admin level as an integer or a list of integers. May have values in the range 0 -- 3. Defaults to 0 indicating country level data.</p> <code>None</code> <code>gadm_version</code> <code>str</code> <p>GADM version as a string. Default is \"v410\" for v4.1.0. No other versions are currently supported.</p> <code>'v410'</code> <p>Returns:</p> Type Description <code>None</code> <p>Called for the side effect of converting CSV data files to Parquet files with each admin level combined into a single file where each admin-unit file is vertically concatenated. Existing variables are maintained.</p> <p>Columns <code>admin_unit_*</code> and <code>gid_code_version</code> are added for the numeric identifier for each admin level <code>*</code> and the GADM identification code version (usually <code>\"1\"</code>).</p> <p>E.g. Where admin-level 1 is <code>10</code> and admin-level 2 is <code>3</code>, the columns <code>admin_unit_1</code> and <code>admin_unit_2</code> will hold the values <code>\"10\"</code> and <code>\"3\"</code> respectively.</p> <p>The special case of country level data is handled by including a column <code>admin_unit_0</code> with all values set to <code>\"0\"</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>data_source</code>, <code>admin_level</code>, or <code>gadm_version</code> are not valid.</p> <code>Exception</code> <p>If <code>dir_from</code> or <code>dir_to</code> are not valid directories.</p> <p>Warns:</p> Type Description <code>UserWarning</code> <p>If no climate files are found in the input directory.</p> Source code in <code>src/clim2parquet/__init__.py</code> Python<pre><code>def clim_to_parquet(  # noqa: C901\n    data_source: str | list[str],\n    dir_from: str | Path,\n    dir_to: str | Path,\n    admin_level: Optional[int] | Optional[list[int]] = None,\n    gadm_version: str = \"v410\",\n) -&gt; None:\n    \"\"\"\n    Convert country climate data to a Parquet file.\n\n    Parameters\n    ----------\n    data_source: str, list[str]\n        A data source or a list of data sources. See available data sources in\n        `get_data_names()`.\n    dir_from : str, Path\n        Path to the CSV data directory, as a `str` or `pathlib.Path`.\n    dir_to: str, Path\n        Path to the output directory where Parquet files will be saved, as a\n        `str` or `pathlib.Path`.\n    admin_level : int, list[int], optional\n        GADM admin level as an integer or a list of integers. May have values\n        in the range 0 -- 3. Defaults to 0 indicating country level data.\n    gadm_version : str\n        GADM version as a string. Default is \"v410\" for v4.1.0. No other\n        versions are currently supported.\n\n    Returns\n    -------\n    None\n        Called for the side effect of converting CSV data files to Parquet files\n        with each admin level combined into a single file where each admin-unit\n        file is vertically concatenated. Existing variables are maintained.\n\n        Columns `admin_unit_*` and `gid_code_version` are added for the numeric\n        identifier for each admin level `*` and the GADM identification\n        code version (usually `\"1\"`).\n\n        E.g. Where admin-level 1 is `10` and admin-level 2 is `3`, the columns\n        `admin_unit_1` and `admin_unit_2` will hold the values `\"10\"` and `\"3\"`\n        respectively.\n\n        The special case of country level data is handled by including a column\n        `admin_unit_0` with all values set to `\"0\"`.\n\n\n    Raises\n    ------\n    ValueError\n        If `data_source`, `admin_level`, or `gadm_version` are not valid.\n    Exception\n        If `dir_from` or `dir_to` are not valid directories.\n\n    Warns\n    -----\n    UserWarning\n        If no climate files are found in the input directory.\n    \"\"\"\n    # convert inputs to lists\n    if admin_level is None:\n        admin_level = [0]\n    if isinstance(admin_level, int):\n        admin_level = [admin_level]\n    if isinstance(data_source, str):\n        data_source = [data_source]\n\n    # input checking\n    if not all(d in get_data_names() for d in data_source):\n        err_bad_clim = \"One or more of `data_source` are not available. \\\n            Run `get_data_names()` to get available data names.\"\n        raise ValueError(err_bad_clim)\n\n    if not all(i in tools._gadm_levels() for i in admin_level):\n        err_bad_admin = \"One or more of `admin_level` are not available. \\\n            Supported levels are: 0, 1, 2, 3.\"\n        raise ValueError(err_bad_admin)\n\n    if gadm_version not in tools._gadm_versions():\n        err_bad_gadm = \"GADM version not available. Only version 4.1.0 is\\\n            supported, and is specified as 'v410'.\"\n        raise ValueError(err_bad_gadm)\n\n    path_dir_from = Path(dir_from)\n    if not path_dir_from.is_dir():\n        err_no_from = f\"Data source directory {dir_from} not found or is not \\\n            a directory.\"\n        raise Exception(err_no_from)\n\n    path_dir_to = Path(dir_to)\n    if not path_dir_to.is_dir():\n        err_no_dest = f\"Data output directory {dir_to} not found or is not \\\n            a directory.\"\n        raise Exception(err_no_dest)\n\n    # load or make admin unit UIDs\n    # suppress warnings\n    # check if admin unit table is present and generate if not\n    admin_unit_ids = tools._data_admin_unit_ids()\n\n    # currently offering only data source and admin level combinations\n    for d in data_source:\n        for i in admin_level:\n            # NOTE: file finder fun throws a warning if no files are found\n            in_files = tools._find_clim_files(path_dir_from, d, i, gadm_version)\n            if len(in_files) &lt; 1:\n                break\n            else:\n                # out_file is a string as pyarrow does not support pathlib.Path\n                out_file = str(path_dir_to / tools._make_output_names(d, i))\n                tools._files_to_parquet(\n                    in_files, out_file, i, admin_unit_ids, gadm_version\n                )\n</code></pre>"},{"location":"reference/#clim2parquet.get_data_names","title":"<code>get_data_names()</code>","text":"<p>Get data source names.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of data source names.</p> Source code in <code>src/clim2parquet/__init__.py</code> Python<pre><code>def get_data_names() -&gt; list[str]:\n    \"\"\"\n    Get data source names.\n\n    Returns\n    -------\n    list[str]\n        A list of data source names.\n    \"\"\"\n    return tools._data_source_info()[\"data_source\"].tolist()\n</code></pre>"}]}